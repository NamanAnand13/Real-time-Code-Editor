{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import Client from'../components/Client';import Editor from'../components/editor';import{initSocket}from'../socket';import ACTIONS from'../Actions';import{Navigate,useLocation,useNavigate,useParams}from'react-router-dom';import toast from'react-hot-toast';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const EditorPage=()=>{const socketRef=useRef(null);const location=useLocation();const reactNavigator=useNavigate();const codeRef=useRef(null);const{roomId}=useParams();// gets the roomId from the url / session\nconst[clients,setClients]=useState([]);async function copyRoomId(){try{await navigator.clipboard.writeText(roomId);toast.success(\"RoomId copied on clipboard successfully\");}catch(err){toast.error(\"Error copying RoomId\");console.error(err);}}function leaveRoom(){reactNavigator('/');}useEffect(()=>{const init=async()=>{var _location$state;socketRef.current=await initSocket();socketRef.current.on('connect_error',err=>handleError(err));socketRef.current.on('connect_failed',err=>handleError(err));function handleError(err){console.log(err);toast.error('Socket conenction failed, try again later');reactNavigator('/');}socketRef.current.emit(ACTIONS.JOIN,{roomId,username:(_location$state=location.state)===null||_location$state===void 0?void 0:_location$state.username});//Listening for new connections\nsocketRef.current.on(ACTIONS.JOINED,_ref=>{var _location$state2;let{clients,username,socketId}=_ref;if(username!==((_location$state2=location.state)===null||_location$state2===void 0?void 0:_location$state2.username)){toast.success(\"\".concat(username,\" joined the room\"));}console.log(\"\".concat(username,\" joined\"));setClients(clients);socketRef.current.emit(ACTIONS.SYNC_CODE,{code:codeRef.current,socketId});});//Listening for disconnection\nsocketRef.current.on(ACTIONS.DISCONNECTED,_ref2=>{let{socketId,username}=_ref2;toast.success(\"\".concat(username,\" left the room\"));setClients(prev=>{return prev.filter(client=>client.socketId!==socketId);});});};init();return()=>{socketRef.current.off(ACTIONS.JOINED);socketRef.current.off(ACTIONS.DISCONNECTED);socketRef.current.disconnect();};},[]);if(!location.state){return/*#__PURE__*/_jsx(Navigate,{to:\"/\"});}return/*#__PURE__*/_jsxs(\"div\",{className:\"mainWrap\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"aside\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"asideInner\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"logo\",children:/*#__PURE__*/_jsx(\"img\",{src:\"/CoDeC.png\",alt:\"codec-logo\",className:\"logoEditor\"})}),/*#__PURE__*/_jsx(\"h3\",{children:\"Connected\"}),/*#__PURE__*/_jsx(\"div\",{className:\"userList\",children:clients.map(client=>/*#__PURE__*/_jsx(Client,{username:client.username},client.socketId))})]}),/*#__PURE__*/_jsx(\"button\",{className:\"btn copyBtn\",onClick:copyRoomId,children:\"Copy ROOM ID\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn LeaveBtn\",onClick:leaveRoom,children:\"Leave\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"editorWrap\",children:/*#__PURE__*/_jsx(Editor,{socketRef:socketRef,roomId:roomId,onCodeChange:code=>{codeRef.current=code;}})})]});};export default EditorPage;","map":{"version":3,"names":["React","useEffect","useRef","useState","Client","Editor","initSocket","ACTIONS","Navigate","useLocation","useNavigate","useParams","toast","jsx","_jsx","jsxs","_jsxs","EditorPage","socketRef","location","reactNavigator","codeRef","roomId","clients","setClients","copyRoomId","navigator","clipboard","writeText","success","err","error","console","leaveRoom","init","_location$state","current","on","handleError","log","emit","JOIN","username","state","JOINED","_ref","_location$state2","socketId","concat","SYNC_CODE","code","DISCONNECTED","_ref2","prev","filter","client","off","disconnect","to","className","children","src","alt","map","onClick","onCodeChange"],"sources":["/Users/namananand/Desktop/Naman/Projects/Real-time-Code-Editor/src/pages/EditorPage.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport Client from '../components/Client';\nimport Editor from '../components/editor';\nimport { initSocket } from '../socket';\nimport ACTIONS from '../Actions';\nimport { Navigate, useLocation, useNavigate, useParams } from 'react-router-dom';\nimport toast from 'react-hot-toast';\n\nconst EditorPage = () => {\n    const socketRef = useRef(null);\n    const location = useLocation();\n    const reactNavigator = useNavigate();\n    const codeRef = useRef(null);\n    const { roomId } = useParams(); // gets the roomId from the url / session\n    const [clients, setClients] = useState([]);\n\n    async function copyRoomId() {\n        try {\n            await navigator.clipboard.writeText(roomId);\n            toast.success(\"RoomId copied on clipboard successfully\");\n        }\n        catch (err) {\n            toast.error(\"Error copying RoomId\");\n            console.error(err);\n        }\n    }\n\n    function leaveRoom() {\n        reactNavigator('/');\n    }\n    useEffect(() => {\n        const init = async () => {\n            socketRef.current = await initSocket();\n            socketRef.current.on('connect_error', (err) => handleError(err));\n            socketRef.current.on('connect_failed', (err) => handleError(err));\n\n            function handleError(err) {\n                console.log(err);\n                toast.error('Socket conenction failed, try again later');\n                reactNavigator('/');\n            }\n\n            socketRef.current.emit(ACTIONS.JOIN, {\n                roomId,\n                username: location.state?.username,\n            });\n\n            //Listening for new connections\n            socketRef.current.on(ACTIONS.JOINED, ({ clients, username, socketId }) => {\n                if (username !== location.state?.username) {\n                    toast.success(`${username} joined the room`);\n                }\n                console.log(`${username} joined`);\n                setClients(clients);\n                socketRef.current.emit(ACTIONS.SYNC_CODE, {\n                    code : codeRef.current,\n                    socketId\n                });\n            });\n\n            //Listening for disconnection\n            socketRef.current.on(ACTIONS.DISCONNECTED, ({ socketId, username }) => {\n                toast.success(`${username} left the room`);\n                setClients((prev) => {\n                    return prev.filter((client) => client.socketId !== socketId);\n                });\n            });\n        }\n        init();\n\n        return () => {\n            socketRef.current.off(ACTIONS.JOINED);\n            socketRef.current.off(ACTIONS.DISCONNECTED);\n            socketRef.current.disconnect();\n        }\n    }, []);\n\n    if (!location.state) {\n        return <Navigate to='/'></Navigate>\n    }\n\n    return (\n        <div className='mainWrap'>\n            <div className='aside'>\n                <div className='asideInner'>\n                    <div className='logo'>\n                        <img src='/CoDeC.png' alt='codec-logo' className='logoEditor'></img>\n                    </div>\n                    <h3>Connected</h3>\n                    <div className='userList'>\n                        {\n                            clients.map((client) => (\n                                <Client username={client.username} key={client.socketId} />\n                            ))\n                        }\n                    </div>\n                </div>\n                <button className='btn copyBtn' onClick={copyRoomId}>Copy ROOM ID</button>\n                <button className='btn LeaveBtn' onClick={leaveRoom}>Leave</button>\n            </div>\n            <div className='editorWrap'>\n                <Editor socketRef={socketRef} roomId={roomId} onCodeChange={(code) => { codeRef.current = code }} />\n            </div>\n        </div>\n    )\n}\n\nexport default EditorPage"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,MAAM,CAAEC,QAAQ,KAAQ,OAAO,CAC1D,MAAO,CAAAC,MAAM,KAAM,sBAAsB,CACzC,MAAO,CAAAC,MAAM,KAAM,sBAAsB,CACzC,OAASC,UAAU,KAAQ,WAAW,CACtC,MAAO,CAAAC,OAAO,KAAM,YAAY,CAChC,OAASC,QAAQ,CAAEC,WAAW,CAAEC,WAAW,CAAEC,SAAS,KAAQ,kBAAkB,CAChF,MAAO,CAAAC,KAAK,KAAM,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEpC,KAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CACrB,KAAM,CAAAC,SAAS,CAAGhB,MAAM,CAAC,IAAI,CAAC,CAC9B,KAAM,CAAAiB,QAAQ,CAAGV,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAW,cAAc,CAAGV,WAAW,CAAC,CAAC,CACpC,KAAM,CAAAW,OAAO,CAAGnB,MAAM,CAAC,IAAI,CAAC,CAC5B,KAAM,CAAEoB,MAAO,CAAC,CAAGX,SAAS,CAAC,CAAC,CAAE;AAChC,KAAM,CAACY,OAAO,CAAEC,UAAU,CAAC,CAAGrB,QAAQ,CAAC,EAAE,CAAC,CAE1C,cAAe,CAAAsB,UAAUA,CAAA,CAAG,CACxB,GAAI,CACA,KAAM,CAAAC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACN,MAAM,CAAC,CAC3CV,KAAK,CAACiB,OAAO,CAAC,yCAAyC,CAAC,CAC5D,CACA,MAAOC,GAAG,CAAE,CACRlB,KAAK,CAACmB,KAAK,CAAC,sBAAsB,CAAC,CACnCC,OAAO,CAACD,KAAK,CAACD,GAAG,CAAC,CACtB,CACJ,CAEA,QAAS,CAAAG,SAASA,CAAA,CAAG,CACjBb,cAAc,CAAC,GAAG,CAAC,CACvB,CACAnB,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAiC,IAAI,CAAG,KAAAA,CAAA,GAAY,KAAAC,eAAA,CACrBjB,SAAS,CAACkB,OAAO,CAAG,KAAM,CAAA9B,UAAU,CAAC,CAAC,CACtCY,SAAS,CAACkB,OAAO,CAACC,EAAE,CAAC,eAAe,CAAGP,GAAG,EAAKQ,WAAW,CAACR,GAAG,CAAC,CAAC,CAChEZ,SAAS,CAACkB,OAAO,CAACC,EAAE,CAAC,gBAAgB,CAAGP,GAAG,EAAKQ,WAAW,CAACR,GAAG,CAAC,CAAC,CAEjE,QAAS,CAAAQ,WAAWA,CAACR,GAAG,CAAE,CACtBE,OAAO,CAACO,GAAG,CAACT,GAAG,CAAC,CAChBlB,KAAK,CAACmB,KAAK,CAAC,2CAA2C,CAAC,CACxDX,cAAc,CAAC,GAAG,CAAC,CACvB,CAEAF,SAAS,CAACkB,OAAO,CAACI,IAAI,CAACjC,OAAO,CAACkC,IAAI,CAAE,CACjCnB,MAAM,CACNoB,QAAQ,EAAAP,eAAA,CAAEhB,QAAQ,CAACwB,KAAK,UAAAR,eAAA,iBAAdA,eAAA,CAAgBO,QAC9B,CAAC,CAAC,CAEF;AACAxB,SAAS,CAACkB,OAAO,CAACC,EAAE,CAAC9B,OAAO,CAACqC,MAAM,CAAEC,IAAA,EAAqC,KAAAC,gBAAA,IAApC,CAAEvB,OAAO,CAAEmB,QAAQ,CAAEK,QAAS,CAAC,CAAAF,IAAA,CACjE,GAAIH,QAAQ,KAAAI,gBAAA,CAAK3B,QAAQ,CAACwB,KAAK,UAAAG,gBAAA,iBAAdA,gBAAA,CAAgBJ,QAAQ,EAAE,CACvC9B,KAAK,CAACiB,OAAO,IAAAmB,MAAA,CAAIN,QAAQ,oBAAkB,CAAC,CAChD,CACAV,OAAO,CAACO,GAAG,IAAAS,MAAA,CAAIN,QAAQ,WAAS,CAAC,CACjClB,UAAU,CAACD,OAAO,CAAC,CACnBL,SAAS,CAACkB,OAAO,CAACI,IAAI,CAACjC,OAAO,CAAC0C,SAAS,CAAE,CACtCC,IAAI,CAAG7B,OAAO,CAACe,OAAO,CACtBW,QACJ,CAAC,CAAC,CACN,CAAC,CAAC,CAEF;AACA7B,SAAS,CAACkB,OAAO,CAACC,EAAE,CAAC9B,OAAO,CAAC4C,YAAY,CAAEC,KAAA,EAA4B,IAA3B,CAAEL,QAAQ,CAAEL,QAAS,CAAC,CAAAU,KAAA,CAC9DxC,KAAK,CAACiB,OAAO,IAAAmB,MAAA,CAAIN,QAAQ,kBAAgB,CAAC,CAC1ClB,UAAU,CAAE6B,IAAI,EAAK,CACjB,MAAO,CAAAA,IAAI,CAACC,MAAM,CAAEC,MAAM,EAAKA,MAAM,CAACR,QAAQ,GAAKA,QAAQ,CAAC,CAChE,CAAC,CAAC,CACN,CAAC,CAAC,CACN,CAAC,CACDb,IAAI,CAAC,CAAC,CAEN,MAAO,IAAM,CACThB,SAAS,CAACkB,OAAO,CAACoB,GAAG,CAACjD,OAAO,CAACqC,MAAM,CAAC,CACrC1B,SAAS,CAACkB,OAAO,CAACoB,GAAG,CAACjD,OAAO,CAAC4C,YAAY,CAAC,CAC3CjC,SAAS,CAACkB,OAAO,CAACqB,UAAU,CAAC,CAAC,CAClC,CAAC,CACL,CAAC,CAAE,EAAE,CAAC,CAEN,GAAI,CAACtC,QAAQ,CAACwB,KAAK,CAAE,CACjB,mBAAO7B,IAAA,CAACN,QAAQ,EAACkD,EAAE,CAAC,GAAG,CAAW,CAAC,CACvC,CAEA,mBACI1C,KAAA,QAAK2C,SAAS,CAAC,UAAU,CAAAC,QAAA,eACrB5C,KAAA,QAAK2C,SAAS,CAAC,OAAO,CAAAC,QAAA,eAClB5C,KAAA,QAAK2C,SAAS,CAAC,YAAY,CAAAC,QAAA,eACvB9C,IAAA,QAAK6C,SAAS,CAAC,MAAM,CAAAC,QAAA,cACjB9C,IAAA,QAAK+C,GAAG,CAAC,YAAY,CAACC,GAAG,CAAC,YAAY,CAACH,SAAS,CAAC,YAAY,CAAM,CAAC,CACnE,CAAC,cACN7C,IAAA,OAAA8C,QAAA,CAAI,WAAS,CAAI,CAAC,cAClB9C,IAAA,QAAK6C,SAAS,CAAC,UAAU,CAAAC,QAAA,CAEjBrC,OAAO,CAACwC,GAAG,CAAER,MAAM,eACfzC,IAAA,CAACV,MAAM,EAACsC,QAAQ,CAAEa,MAAM,CAACb,QAAS,EAAMa,MAAM,CAACR,QAAW,CAC7D,CAAC,CAEL,CAAC,EACL,CAAC,cACNjC,IAAA,WAAQ6C,SAAS,CAAC,aAAa,CAACK,OAAO,CAAEvC,UAAW,CAAAmC,QAAA,CAAC,cAAY,CAAQ,CAAC,cAC1E9C,IAAA,WAAQ6C,SAAS,CAAC,cAAc,CAACK,OAAO,CAAE/B,SAAU,CAAA2B,QAAA,CAAC,OAAK,CAAQ,CAAC,EAClE,CAAC,cACN9C,IAAA,QAAK6C,SAAS,CAAC,YAAY,CAAAC,QAAA,cACvB9C,IAAA,CAACT,MAAM,EAACa,SAAS,CAAEA,SAAU,CAACI,MAAM,CAAEA,MAAO,CAAC2C,YAAY,CAAGf,IAAI,EAAK,CAAE7B,OAAO,CAACe,OAAO,CAAGc,IAAI,CAAC,CAAE,CAAE,CAAC,CACnG,CAAC,EACL,CAAC,CAEd,CAAC,CAED,cAAe,CAAAjC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}