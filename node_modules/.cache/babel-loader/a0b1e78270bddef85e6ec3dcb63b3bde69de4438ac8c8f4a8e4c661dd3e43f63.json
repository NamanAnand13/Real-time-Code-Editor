{"ast":null,"code":"var _jsxFileName = \"/Users/namananand/Desktop/Real-time-Code-Editor/src/pages/EditorPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Client from '../components/Client';\nimport Editor from '../components/editor';\nimport { initSocket } from '../socket';\nimport ACTIONS from '../Actions';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditorPage = () => {\n  _s();\n  const socketRef = useRef(null);\n  const location = useLocation();\n  const reactNavigator = useNavigate();\n  useEffect(() => {\n    const init = async () => {\n      var _location$state;\n      socketRef.current = await initSocket();\n      socketRef.current.on('connect_error', err => handleError(err));\n      socketRef.current.on('connect_failed', err => handleError(err));\n      function handleError(err) {\n        console.log(err);\n        toast.error('Socket conenction failed, try again later');\n        reactNavigator('/');\n      }\n      socketRef.current.emit(ACTIONS.JOIN, {\n        roomId,\n        username: (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username\n      });\n    };\n    init();\n  }, []);\n  const [clients, setClients] = useState([{\n    socketId: 1,\n    username: \"naman a\"\n  }, {\n    socketId: 2,\n    username: \"hims jain\"\n  }, {\n    socketId: 3,\n    username: \"faiz\"\n  }]);\n  if (!location) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainWrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aside\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"asideInner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/CoDeC.png\",\n            alt: \"codec-logo\",\n            className: \"logoEditor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"userList\",\n          children: clients.map(client => /*#__PURE__*/_jsxDEV(Client, {\n            username: client.username\n          }, client.socketId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn copyBtn\",\n        children: \"Copy ROOM ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn LeaveBtn\",\n        children: \"Leave\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editorWrap\",\n      children: /*#__PURE__*/_jsxDEV(Editor, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(EditorPage, \"gz5j0J4aeTrWovtMBl+iP1MfnAI=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = EditorPage;\nexport default EditorPage;\nvar _c;\n$RefreshReg$(_c, \"EditorPage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Client","Editor","initSocket","ACTIONS","useLocation","useNavigate","toast","jsxDEV","_jsxDEV","EditorPage","_s","socketRef","location","reactNavigator","init","_location$state","current","on","err","handleError","console","log","error","emit","JOIN","roomId","username","state","clients","setClients","socketId","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","client","_c","$RefreshReg$"],"sources":["/Users/namananand/Desktop/Real-time-Code-Editor/src/pages/EditorPage.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport Client from '../components/Client';\nimport Editor from '../components/editor';\nimport { initSocket } from '../socket';\nimport ACTIONS from '../Actions';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport toast from 'react-hot-toast';\n\n\nconst EditorPage = () => {\n    const socketRef = useRef(null);\n    const location = useLocation();\n    const reactNavigator = useNavigate();\n    useEffect(() => {\n        const init = async () => {\n            socketRef.current = await initSocket();\n            socketRef.current.on('connect_error', (err) => handleError(err));\n            socketRef.current.on('connect_failed', (err) => handleError(err));\n\n            function handleError(err) {\n                console.log(err);\n                toast.error('Socket conenction failed, try again later');\n                reactNavigator('/');\n            }\n\n            socketRef.current.emit(ACTIONS.JOIN, {\n                roomId,\n                username: location.state?.username,\n            });\n        }\n        init();\n    }, [])\n    const [clients, setClients] = useState([\n        { socketId: 1, username: \"naman a\" },\n        { socketId: 2, username: \"hims jain\" },\n        { socketId: 3, username: \"faiz\" },\n    ]);\n\n    if(!location)\n\n    return (\n        <div className='mainWrap'>\n            <div className='aside'>\n                <div className='asideInner'>\n                    <div className='logo'>\n                        <img src='/CoDeC.png' alt='codec-logo' className='logoEditor'></img>\n                    </div>\n                    <h3>Connected</h3>\n                    <div className='userList'>\n                        {\n                            clients.map((client) => (\n                                <Client username={client.username} key={client.socketId} />\n                            ))\n                        }\n                    </div>\n                </div>\n                <button className='btn copyBtn'>Copy ROOM ID</button>\n                <button className='btn LeaveBtn'>Leave</button>\n            </div>\n            <div className='editorWrap'>\n                <Editor />\n            </div>\n        </div>\n    )\n}\n\nexport default EditorPage"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}